/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2013 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

#ifndef HKAI_NAV_VOLUME_MEDIATOR_H
#define HKAI_NAV_VOLUME_MEDIATOR_H

#include <Common/Base/Object/hkReferencedObject.h>
#include <Ai/Pathfinding/hkaiBaseTypes.h>
#include <Ai/Pathfinding/Collide/hkaiSpatialQueryHitFilter.h>
#include <Ai/Pathfinding/NavVolume/hkaiNavVolumeInstance.h>

extern const class hkClass hkaiNavVolumeMediatorClass;
class hkaiNavVolume;

	/// Interface for spatial queries on an hkaiNavVolume.
class hkaiNavVolumeMediator : public hkReferencedObject
{
public:
	HK_DECLARE_REFLECTION();
	HK_DECLARE_CLASS_ALLOCATOR( HK_MEMORY_CLASS_AI );

	hkaiNavVolumeMediator() {}

	hkaiNavVolumeMediator( hkFinishLoadedObjectFlag f )
	:	hkReferencedObject(f)
	{}

	virtual ~hkaiNavVolumeMediator() {}

	/// Input information for getClosestPoint queries
	struct GetClosestPointInput
	{
		HK_DECLARE_NONVIRTUAL_CLASS_ALLOCATOR( HK_MEMORY_CLASS_AI, GetClosestPointInput);

			/// Default constructor - m_position is set to HK_REAL_MAX, and m_queryRadius is set to 5.0
		inline GetClosestPointInput();

			/// Sets m_position and m_queryRadius to the provided values
		inline GetClosestPointInput( hkVector4Parameter position, hkSimdRealParameter radius );

		inline void setInstance( const hkaiNavVolumeInstance* instance );

			/// Target position of the closestPoint query.
		hkVector4 m_position;

			/// Maximum distance at which hits will be considered. For some mediator implementations, using a large value here will
			/// greatly increase the query time.
		hkSimdReal m_queryRadius;

			/// Filtering information that is passed to the hkaiSpatialQueryHitFilter.
			/// For queries generated by an hkaiCharacter, this will be set to hkaiCharacter::m_agentFilterInfo
		hkUint32 m_filterInfo;

			/// User defined data.
			/// For queries generated by an hkaiCharacter, this will be set to hkaiCharacter::m_userData
		hkUlong m_userData; 

			/// Optional filter pointer. If this is HK_NULL (the default), no filtering will be performed.
			/// Note that this pointer is not reference counted.
		const hkaiSpatialQueryHitFilter* m_hitFilter;

			/// Optional pointer to the hkaiNavVolumeInstance* being queried (if any).
		const hkaiNavVolumeInstance* m_instance;

		const hkVector4*		m_translation;

	};

		/// Output the closest point to the given position in world space.
		/// The closest cell key is also returned. This will be HKAI_INVALID_PACKED_KEY if no cell is found.
	virtual hkaiPackedKey getClosestPoint(const GetClosestPointInput& gcpInput, hkVector4& closestPointOut ) const = 0;

	//
	// Old mediator interface - no filtering is performed
	//
#ifndef HKAI_DISABLE_OLD_MEDIATOR_INTERFACE
	hkaiPackedKey getClosestPoint(hkVector4Parameter p, hkReal testRadius, hkVector4& closestPointOut ) const
	{
		GetClosestPointInput input(p, hkSimdReal::fromFloat(testRadius) );
		return getClosestPoint(input, closestPointOut);
	}
#endif 

		/// Utility method to forward the GetClosestPointInput fields to its hit filter (if non-NULL)
	static inline hkBool32 HK_CALL isVolumeEnabled( const GetClosestPointInput& input, const hkaiNavVolume* volume)
	{
		return !input.m_hitFilter || input.m_hitFilter->isVolumeEnabled( volume, input.m_filterInfo, input.m_userData) ;
	}

		/// Utility method to forward the GetClosestPointInput fields to its hit filter (if non-NULL)
	static inline hkBool32 HK_CALL isCellEnabled( const GetClosestPointInput& input, const hkaiNavVolume* volume, hkaiNavVolume::CellIndex cellIndex)
	{
		return !input.m_hitFilter || input.m_hitFilter->isCellEnabled( volume, cellIndex, input.m_filterInfo, input.m_userData) ;
	}

};

#include <Ai/Pathfinding/Collide/NavVolume/hkaiNavVolumeMediator.inl>

#endif // HKAI_NAV_VOLUME_MEDIATOR_H

/*
 * Havok SDK - Base file, BUILD(#20131218)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2013
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available from salesteam@havok.com.
 * 
 */
